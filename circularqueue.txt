#include<iostream>
using namespace std;
#include<queue>

template <class T>
class Queue
{
public:
	Queue(const size_t capacity = 10)
		: _capacity(capacity)
	{
		_pData = new T[capacity];
		_front = _rear = 0;
	}

	void push(const T& value)
	{
		if (!empty())
		{
			_pData[_rear] = value;
			_rear =(_rear+1) % _capacity;
			//++_size;
		}
	}
	void pop()
	{
		if (size() != 0)
		{
			_pData[_front] = NULL;
			//--_size;
			_front = (_front + 1) % _capacity;
		}
	}
	T& front()
	{
		return _pData[_front];
	}
	T& back()
	{
		return (_pData[_rear-1]);
	}
	size_t size()
	{
		return (_rear - _front + _capacity)%_capacity;
	}
	bool empty()
	{
		if ((_rear + 1) % _capacity == _front)
			return true;
		return false;
	}
private:
	T* _pData;
	size_t _front;
	size_t _rear;
	size_t _capacity;
};



int main()
{

	Queue<int> q(10);
	q.push(1);
	q.push(2);
	q.push(3);
	q.push(4);
	q.push(5);
	q.push(6);
	q.push(7);
	q.push(8);
	q.push(9);
	cout << q.front() << endl;
	cout << q.back() << endl;
	cout << q.size() << endl;

	if (q.empty())
	{
		cout << "不空" << endl;
	}
	else{
		cout << "空" << endl;
	}
	q.pop();
	//q.pop();

	cout << q.size() << endl;
	cout << q.front() << endl;
	cout << q.back() << endl;
	q.push(12);
	//q.push(13);
	cout << q.front() << endl;
	cout << q.back() << endl;
	cout << q.size() << endl;
	return 0;
}
